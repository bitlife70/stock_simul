#!/usr/bin/env python3
"""
Week 2 Enhanced Data Integration Test Suite
Tests all enhanced features with real Korean market data
"""
import requests
import json
from datetime import datetime

# API Base URL
API_BASE = "http://localhost:8002"

def test_api_health():
    """Test API health endpoint"""
    print("üîç Testing API Health...")
    try:
        response = requests.get(f"{API_BASE}/health", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ API is healthy - Status: {data['status']}")
            return True
        else:
            print(f"‚ùå API health check failed - Status: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå API health check error: {e}")
        return False

def test_real_stock_data():
    """Test real Korean stock data fetching"""
    print("\nüìà Testing Real Korean Stock Data...")
    try:
        response = requests.get(f"{API_BASE}/api/v1/stocks?limit=5", timeout=10)
        if response.status_code == 200:
            stocks = response.json()
            print(f"‚úÖ Fetched {len(stocks)} real Korean stocks")
            for stock in stocks[:3]:
                print(f"   ‚Ä¢ {stock['name_kr']} ({stock['symbol']}) - {stock['market']}")
            return True
        else:
            print(f"‚ùå Stock data fetch failed - Status: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Stock data fetch error: {e}")
        return False

def test_samsung_price_data():
    """Test real price data for Samsung Electronics"""
    print("\nüí∞ Testing Samsung Electronics Price Data...")
    try:
        response = requests.get(f"{API_BASE}/api/v1/stocks/005930/data?days=5", timeout=15)
        if response.status_code == 200:
            price_data = response.json()
            if price_data:
                latest = price_data[-1]
                print(f"‚úÖ Samsung (005930) latest data:")
                print(f"   ‚Ä¢ Date: {latest['date']}")
                print(f"   ‚Ä¢ Close: ‚Ç©{latest['close']:,}")
                print(f"   ‚Ä¢ Volume: {latest['volume']:,}")
                print(f"   ‚Ä¢ Total records: {len(price_data)} days")
                return True
            else:
                print("‚ùå No price data returned")
                return False
        else:
            print(f"‚ùå Price data fetch failed - Status: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Price data fetch error: {e}")
        return False

def test_market_overview():
    """Test market overview endpoint"""
    print("\nüè¢ Testing Market Overview...")
    try:
        response = requests.get(f"{API_BASE}/api/v1/market/overview", timeout=10)
        if response.status_code == 200:
            overview = response.json()
            print(f"‚úÖ Market Overview:")
            print(f"   ‚Ä¢ KOSPI stocks: {overview['markets']['KOSPI']['total_stocks']}")
            print(f"   ‚Ä¢ KOSDAQ stocks: {overview['markets']['KOSDAQ']['total_stocks']}")
            print(f"   ‚Ä¢ Primary data source: {overview['data_sources']['primary']}")
            return True
        else:
            print(f"‚ùå Market overview failed - Status: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Market overview error: {e}")
        return False

def test_caching_performance():
    """Test caching performance improvement"""
    print("\n‚ö° Testing Caching Performance...")
    try:
        import time
        
        # First request (cache miss)
        start_time = time.time()
        response1 = requests.get(f"{API_BASE}/api/v1/stocks?limit=10", timeout=10)
        first_time = time.time() - start_time
        
        # Second request (cache hit)
        start_time = time.time()
        response2 = requests.get(f"{API_BASE}/api/v1/stocks?limit=10", timeout=10)
        second_time = time.time() - start_time
        
        if response1.status_code == 200 and response2.status_code == 200:
            print(f"‚úÖ Caching Performance:")
            print(f"   ‚Ä¢ First request (cold): {first_time:.3f}s")
            print(f"   ‚Ä¢ Second request (cached): {second_time:.3f}s")
            if second_time < first_time:
                print(f"   ‚Ä¢ Performance improvement: {((first_time - second_time) / first_time * 100):.1f}%")
            return True
        else:
            print("‚ùå Caching test failed")
            return False
    except Exception as e:
        print(f"‚ùå Caching test error: {e}")
        return False

def test_strategy_templates():
    """Test strategy templates endpoint"""
    print("\nüìã Testing Strategy Templates...")
    try:
        response = requests.get(f"{API_BASE}/api/v1/strategies/templates", timeout=5)
        if response.status_code == 200:
            templates = response.json()
            print(f"‚úÖ Strategy Templates Available: {len(templates)}")
            for template in templates:
                print(f"   ‚Ä¢ {template['name_kr']} ({template['id']})")
            return True
        else:
            print(f"‚ùå Strategy templates failed - Status: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Strategy templates error: {e}")
        return False

def main():
    """Run complete Week 2 integration test suite"""
    print("=" * 60)
    print("üß™ Week 2 Enhanced Data Integration Test Suite")
    print("=" * 60)
    
    tests = [
        test_api_health,
        test_real_stock_data,
        test_samsung_price_data,
        test_market_overview,
        test_caching_performance,
        test_strategy_templates
    ]
    
    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå Test failed with exception: {e}")
            results.append(False)
    
    # Summary
    print("\n" + "=" * 60)
    print("üìä Test Results Summary")
    print("=" * 60)
    
    passed = sum(results)
    total = len(results)
    
    print(f"‚úÖ Passed: {passed}/{total} tests ({(passed/total*100):.1f}%)")
    
    if passed == total:
        print("\nüéâ Week 2 Enhanced Data Integration: ALL TESTS PASSED!")
        print("‚úÖ Real Korean market data integration is fully functional")
        print("‚úÖ Caching system is working properly")
        print("‚úÖ All API endpoints are responding correctly")
        print("‚úÖ Frontend can connect to enhanced API on port 8002")
        print("\nüöÄ Ready for Week 3: Strategy Engine Enhancement!")
    else:
        print(f"\n‚ö†Ô∏è  {total - passed} test(s) failed. Please check the enhanced API server.")
    
    print("\nüì± Frontend Application: http://localhost:3003")
    print("üìö API Documentation: http://localhost:8002/docs")

if __name__ == "__main__":
    main()